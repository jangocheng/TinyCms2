@using TinyCms.Core.Domain.Common
@model CustomerModel
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        $("#customer-edit").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            },
            select: tabstrip_on_tab_select
        });
    });
</script>
<div id="customer-edit">
    <ul>
        <li @Html.RenderSelectedTabIndex(0, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.Info")
        </li>
        <li @Html.RenderSelectedTabIndex(1, GetSelectedTabIndex())>
            @T("Admin.Customers.Customers.CustomerRoles")
        </li>
        @if (Model.Id > 0)
        {
            <li @Html.RenderSelectedTabIndex(3, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.ActivityLog")
            </li>
            <li @Html.RenderSelectedTabIndex(4, GetSelectedTabIndex())>
                @T("Admin.Customers.Customers.Impersonate")
            </li>
        }
    </ul>
    <div>
        @TabInfo()
    </div>
    <div>
        @TabCustomerRoles()
    </div>
    @if (Model.Id > 0)
    {
        <div>
            @TabActivityLog()
        </div>
        <div>
            @TabImpersonate()
        </div>
    }
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(Html, "customer-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab index*@
<input type="hidden" id="selected-tab-index" name="selected-tab-index" value="@(GetSelectedTabIndex())">

@helper TabInfo()
{
    <table class="adminContent customer-info-tab">
    @if (Model.UsernamesEnabled)
    {
        if (Model.Id == 0 || Model.AllowUsersToChangeUsernames)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Username):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Username)
                    @Html.ValidationMessageFor(model => model.Username)
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.Username):
                </td>
                <td class="adminData">
                    @Model.Username
                    @Html.HiddenFor(model => model.Username)
                </td>
            </tr>
        }
    }
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Email):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Password):
        </td>
        <td class="adminData">
            @Html.TextBoxFor(model => model.Password, new {autocomplete = "off", @class = "text-box single-line"})
            @Html.ValidationMessageFor(model => model.Password)
            @if (Model.Id > 0)
            {
                <input type="submit" name="changepassword" class="k-button" value="@T("Admin.Customers.Customers.Fields.Password.Change")"/>
            }
        </td>
    </tr>
    @if (Model.Id > 0 && Model.AssociatedExternalAuthRecords.Count > 0)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.AssociatedExternalAuthRecords):
            </td>
            <td class="adminData">

                <div id="externalauthrecords-grid"></div>

                <script>

                    //local datasource
                    var externalauthrecords = [
                        @for (var i = 0; i < Model.AssociatedExternalAuthRecords.Count; i++)
                        {
                            var aear = Model.AssociatedExternalAuthRecords[i];
                            <text>
    {
        AuthMethodName: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.AuthMethodName)))",
        Email: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.Email)))",
        ExternalIdentifier: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.ExternalIdentifier)))"
    }
</text>
                            if (i != Model.AssociatedExternalAuthRecords.Count - 1)
                            {
                                <text>,</text>
                            }
                        }
                    ];

                    $(document).ready(function() {
                        $("#externalauthrecords-grid").kendoGrid({
                            dataSource: {
                                data: externalauthrecords,
                                schema: {
                                    model: {
                                        fields: {
                                            AuthMethodName: { type: "string" },
                                            Email: { type: "string" },
                                            ExternalIdentifier: { type: "string" }
                                        }
                                    }
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                }
                            },
                            pageable: {
                                refresh: true,
                                numeric: false,
                                previousNext: false,
                                info: false
                            },
                            scrollable: false,
                            columns: [
                                {
                                    field: "AuthMethodName",
                                    title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.AuthMethodName")",
                                    width: 100
                                }, {
                                    field: "Email",
                                    title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.Email")",
                                    width: 100
                                }, {
                                    field: "ExternalIdentifier",
                                    title: "@T("Admin.Customers.Customers.AssociatedExternalAuth.Fields.ExternalIdentifier")",
                                    width: 300
                                }
                            ]
                        });
                    });

                </script>
            </td>
        </tr>
    }

    @if (Model.GenderEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Gender):
            </td>
            <td class="adminData">
                <div class="gender">
                    @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new {id = "Gender_Male"})
                    <label class="forcheckbox" for="Gender_Male">@T("Admin.Customers.Customers.Fields.Gender.Male")</label>
                </div>
                <div class="gender">
                    @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new {id = "Gender_Female"})
                    <label class="forcheckbox" for="Gender_Female">@T("Admin.Customers.Customers.Fields.Gender.Female")</label>
                </div>
            </td>
        </tr>
    }
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.FirstName):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.FirstName)
            @Html.ValidationMessageFor(model => model.FirstName)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.LastName):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.LastName)
            @Html.ValidationMessageFor(model => model.LastName)
        </td>
    </tr>
    @if (Model.DateOfBirthEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.DateOfBirth):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DateOfBirth)
                @Html.ValidationMessageFor(model => model.DateOfBirth)
            </td>
        </tr>
    }
    @if (Model.CompanyEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Company):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Company)
                @Html.ValidationMessageFor(model => model.Company)
            </td>
        </tr>
    }
    @if (Model.StreetAddressEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StreetAddress):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.StreetAddress)
                @Html.ValidationMessageFor(model => model.StreetAddress)
            </td>
        </tr>
    }
    @if (Model.StreetAddress2Enabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StreetAddress2):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.StreetAddress2)
                @Html.ValidationMessageFor(model => model.StreetAddress2)
            </td>
        </tr>
    }
    @if (Model.ZipPostalCodeEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ZipPostalCode):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ZipPostalCode)
                @Html.ValidationMessageFor(model => model.ZipPostalCode)
            </td>
        </tr>
    }
    @if (Model.CityEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.City):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.City)
                @Html.ValidationMessageFor(model => model.City)
            </td>
        </tr>
    }
    @if (Model.CountryEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CountryId):
            </td>
            <td class="adminData">
                @Html.DropDownList("CountryId", Model.AvailableCountries)
                @Html.ValidationMessageFor(model => model.CountryId)
            </td>
        </tr>
    }
    @if (Model.CountryEnabled && Model.StateProvinceEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StateProvinceId):
            </td>
            <td class="adminData">
                @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                @Html.ValidationMessageFor(model => model.StateProvinceId)
            </td>
        </tr>
    }
    @if (Model.PhoneEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Phone):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Phone)
                @Html.ValidationMessageFor(model => model.Phone)
            </td>
        </tr>
    }
    @if (Model.FaxEnabled)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Fax):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Fax)
                @Html.ValidationMessageFor(model => model.Fax)
            </td>
        </tr>
    }
    @if (Model.CustomerAttributes.Count > 0)
    {
        @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
    }
    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.AdminComment):
        </td>
        <td class="adminData">
            @Html.TextAreaFor(model => model.AdminComment, new {style = "Width: 250px; Height: 150px;"})
            @Html.ValidationMessageFor(model => model.AdminComment)
        </td>
    </tr>
    @if (Model.AllowCustomersToSetTimeZone)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.TimeZoneId):
            </td>
            <td class="adminData">
                @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                @Html.ValidationMessageFor(model => model.TimeZoneId)
            </td>
        </tr>
    }


    <tr>
        <td class="adminTitle">
            @Html.NopLabelFor(model => model.Active):
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.Active)
            @Html.ValidationMessageFor(model => model.Active)
        </td>
    </tr>
    @if (Model.Id > 0)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LastIpAddress):
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.LastIpAddress)
            </td>
        </tr>
    }
    @if (Model.Id > 0)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CreatedOn):
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.CreatedOn)
            </td>
        </tr>
    }
    @if (Model.Id > 0)
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LastActivityDate):
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.LastActivityDate)
            </td>
        </tr>
    }
    @if (Model.Id > 0 && !String.IsNullOrEmpty(Model.LastVisitedPage))
    {
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LastVisitedPage):
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.LastVisitedPage)
            </td>
        </tr>
    }
    </table>
}
@helper TabCustomerRoles()
{
    if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
    {
        foreach (var customerRole in Model.AvailableCustomerRoles)
        {
            <div>
                <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))"/>@customerRole.Name
            </div>
        }
    }
    else
    {
        @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
    }
}

@helper TabActivityLog()
{
    var defaultGridPageSize = EngineContext.Current.Resolve<AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<AdminAreaSettings>().GridPageSizes;

    <table class="adminContent">
        <tr>
            <td>
                <div id="activitylog-grid"></div>

                <script>
                    $(document).ready(function() {
                        $("#activitylog-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ListActivityLog", "Customer", new {customerId = Model.Id}))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [
                                {
                                    field: "ActivityLogTypeName",
                                    title: "@T("Admin.Customers.Customers.ActivityLog.ActivityLogType")",
                                    width: 300,
                                }, {
                                    field: "Comment",
                                    title: "@T("Admin.Customers.Customers.ActivityLog.Comment")"
                                }, {
                                    field: "CreatedOn",
                                    title: "@T("Admin.Customers.Customers.ActivityLog.CreatedOn")",
                                    width: 200,
                                    type: "date",
                                    format: "{0:G}"
                                }
                            ]
                        });
                    });
                </script>
            </td>
        </tr>
    </table>
}
@helper TabImpersonate()
{
    <table class="adminContent">
        <tr>
            <td>
                @T("Admin.Customers.Customers.Impersonate.Description1")
                <br/>
                @T("Admin.Customers.Customers.Impersonate.Description2")
                <br/>
                <br/>
                <input type="submit" name="impersonate" class="k-button" value="@T("Admin.Customers.Customers.Impersonate.Button")"/>
            </td>
        </tr>
    </table>
}